<!DOCTYPE HTML>
<!-- original : https://codepen.io/jenjen9/pen/yLBNOKB -->
<html>
<head>
    <title>Unit Converter</title>
    <link href="https://fonts.googleapis.com/css?family=Oxygen&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.0/css/all.css" integrity="sha384-lZN37f5QGtY3VHgisS14W3ExzMWZxybE1SJSEsQp9S+oqd12jhcu+A56Ebc1zFSJ" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Serif:ital,opsz,wght@0,8..144,100..900;1,8..144,100..900&display=swap" rel="stylesheet">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>

    <style>
        body{
            background-color:#000000;
        }

        .container{
            margin: 0 25px;
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            align-items: center;
            align-content: center;
        }


        h1 {
            font-family: "Roboto Serif", serif;
            font-size: 40px;
            text-align:center;
            color: #fdfbf2;
        }



        button {
            border-radius: 10px;
            background-color: transparent;
            margin: 5px;
            font-family: "Roboto Serif", serif;
            border: 2px solid #dd9850;
            padding: 10px ;
            color: #fdfbf2;
            text-align: center;
            width: 60px;

        }
        /*
        #mass{
            background-color: #60688b;
        }
        #volume{
          background-color: #4CAF50;
        ;
        }
        #temperature{
            background-color: #ff9233;
        }
            */
        button:hover{
            border-color: #d9c0a7;
        }

        .categoryButtons{
            margin: auto;
            width: fit-content;


        }

        .content{
            width: 1000px;
            margin: auto;

        }

        .metricImperial, .temp-unit-buttons, .speed-units, .time-units, .cooking-units{
            display: flex;
            justify-content: center;
            align-items:center;
            align-content: center;
        }

        #toImperial, #toMetric, #toCelsius, #toFahrenheit, #toKelvin, #mileToKm, #kmToMile, #hours, #days, #measurement, #m2ml {
            background-color:#dd9850 ;
            border-color: transparent;
            font-size: 10px;
            width: 88px;
            color: black;
            /* width: 90px; */
        }

        #toImperial:hover, #toMetric:hover, #toCelsius:hover, #toFahrenheit:hover, #toKelvin:hover, #mileToKm:hover, #kmToMile:hover, #hours:hover, #days:hover, #measurement:hover, #m2ml:hover{
            border-color: #d9c0a7 ;
        }

        input {
            width: 257px;
            padding: 10px;
            color: #fdfbf2;
            font-size: 12px;
            border-radius: 9px;
            text-align: center;
            font-family: "Roboto Serif", serif;
            margin: auto;
            border: 2px solid #fdfbf2;
            background-color: transparent;
        }


        #output {
            font-family: "Roboto Serif", serif;
            font-size: 12px;
            color: #fdfbf2;
            text-align: left;
            margin: auto;
            padding: 10px;
            width: 257px;
            background-color: transparent;
            border: 2px solid #fdfbf2;
            border-radius: 9px;
        }



        #reset{
            background-color: #dd9850 ;
            font-size: 12px;
            color: #000000;
            border: none;
            margin: 15px auto;
            width: 283px;

        }

        #reset:hover{
            background-color: #d9c0a7 ;

        }


    </style>

</head>
<body>
<div class="container">

    <div class="content">
        <div class="categoryButtons">
            <button id="mass" title="Mass"><i class="fas fa-balance-scale fa-1x"></i></button>
            <button id="volume" title="Volume"><i class="fas fa-glass-whiskey fa-1x"></i></button>
            <button id="cooking" title="Cooking"><i class="fa solid fa-spoon fa-1x"></i></button>
            <button id="temperature" title="Temperature"><i class="fa fa-thermometer-2 fa-1x"></i></button>
        </div>

        <input type="number" style="display: none" placeholder="Enter a number" >
        <div class="metricImperial">
            <button id="toMetric" style="display:none">Imperial to metric</button>
            <button id="toImperial" style="display:none">Metric to imperial</button>
        </div>
        <div class="temp-unit-buttons">
            <button id="toCelsius" style="display:none">to Celsius</button>
            <button id="toFahrenheit" style="display:none">to Fahrenheit</button>
            <button id="toKelvin" style="display:none">to Kelvin</button>
        </div>
        <div class="speed-units">
            <button id="mileToKm" style="display:none">mph</button>
            <button id="kmToMile" style="display:none">km/hr</button>
        </div>
        <div class="time-units">
            <button id="hours" style="display:none">Hours</button>
            <button id="days" style="display:none">Days</button>
        </div>
        <div class="cooking-units">
            <button id="measurement" style="display:none">Cooking measurement equivalent</button>
            <button id="m2ml" style="display:none">Cooking measurement to metric</button>
        </div>
    </div>
</div>



<div id="output" style="display:none"></div>

<div>
    <input type="reset" id="reset" style="display:none">
</div>



</div>
<script >


    let input = document.querySelector('input');
    let output = document.getElementById('output');
    const toMetric = document.getElementById('toMetric');
    const toImperial = document.getElementById('toImperial');
    const toCelsius = document.getElementById('toCelsius');
    const toFahrenheit = document.getElementById('toFahrenheit');
    const toKelvin = document.getElementById('toKelvin');
    const mileToKm = document.getElementById('mileToKm');
    const kmToMile = document.getElementById('kmToMile');
    const hours = document.getElementById('hours');
    const days = document.getElementById('days');
    const measurement = document.getElementById('measurement');
    const m2ml = document.getElementById('m2ml');
    const resetButton = document.getElementById('reset');



    const massButton = document.getElementById('mass').addEventListener('click', (e) => {
        input.style.display = 'block';
        toFahrenheit.style.display = 'none';
        toCelsius.style.display = 'none';
        toKelvin.style.display = 'none';
        hours.style.display = 'none';
        days.style.display = 'none';
        mileToKm.style.display = 'none';
        kmToMile.style.display = 'none';
        toMetric.style.display = 'block';
        toImperial.style.display='block';
        measurement.style.display = 'none';
        m2ml.style.display = 'none';
        resetButton.style.display = 'block';
        toMetric.addEventListener('click', (e) => {
            output.innerHTML = `${input.value} ounce &rarr; ${massUnits.imperial.ounce()} gram <br>
		${input.value} pound &rarr; ${massUnits.imperial.pound()} kg <br>
		${input.value} stone &rarr; ${massUnits.imperial.stone()} kg <br>
		${input.value} ton &rarr; ${massUnits.imperial.imperialTon()} tonne <br>
  		${input.value} ounce &rarr; ${massUnits.imperial.onTop()} pound
		`;
        });
        toImperial.addEventListener('click', (e) => {
            output.innerHTML = `${input.value} gram &rarr; ${massUnits.metric.gram()} ounce <br>
		${input.value} kg &rarr; ${massUnits.metric.kglb()} pound <br>
		${input.value} kg &rarr; ${massUnits.metric.kgst()} stone <br>
		${input.value} tonne &rarr; ${massUnits.metric.metricTonne()} ton <br>
  		${input.value} pound &rarr; ${massUnits.metric.pToon()} ounce
		`;
        });
        output.style.display = 'block';
        output.innerHTML = "";
        input.value = null;
    });

    const volumeButton = document.getElementById('volume').addEventListener('click', (e) => {
        input.style.display = 'block';
        toFahrenheit.style.display = 'none';
        toCelsius.style.display = 'none';
        toKelvin.style.display = 'none';
        hours.style.display = 'none';
        days.style.display = 'none';
        mileToKm.style.display = 'none';
        kmToMile.style.display = 'none';
        toMetric.style.display = 'block';
        toImperial.style.display='block';
        measurement.style.display = 'none';
        m2ml.style.display = 'none';
        resetButton.style.display = 'block';
        toMetric.addEventListener('click', (e) => {
            output.innerHTML = `${input.value} fl. ounce &rarr; ${volumeUnits.imperial.fluidOunce()} ml <br>
		${input.value} pint &rarr; ${volumeUnits.imperial.pint()} litre <br>
		${input.value} quart &rarr; ${volumeUnits.imperial.quart()} litre <br>
		${input.value} gallon &rarr; ${volumeUnits.imperial.gallon()} litre
		`;
        });
        toImperial.addEventListener('click', (e) =>{
            output.innerHTML = `${input.value} ml &rarr; ${volumeUnits.metric.ml()} fluid ounce <br>
		${input.value} litre &rarr; ${volumeUnits.metric.lToPt()} pint <br>
		${input.value} litre &rarr; ${volumeUnits.metric.lToQt()} quart <br>
		${input.value} litre &rarr; ${volumeUnits.metric.lToGallon()} gallon
		`;
        });
        output.style.display = 'block';
        output.innerHTML = "";
        input.value = null;
    });



    const temperatureButton = document.getElementById('temperature').addEventListener('click', (e) => {
        toMetric.style.display = 'none';
        toImperial.style.display = 'none';
        hours.style.display = 'none';
        days.style.display = 'none';
        mileToKm.style.display = 'none';
        kmToMile.style.display = 'none';
        input.style.display = 'block';
        toCelsius.style.display = 'block';
        toFahrenheit.style.display = 'block';
        toKelvin.style.display = 'block';
        measurement.style.display = 'none';
        m2ml.style.display = 'none';
        resetButton.style.display = 'block';
        toCelsius.addEventListener('click', (e) =>{
            output.innerHTML =`${input.value} &deg;F &rarr; ${temperatureUnits.fahrenheit.fToC()} &deg;C <br>
		${input.value} &deg;K &rarr; ${temperatureUnits.kelvin.kToC()} &deg;C`;
        });
        toFahrenheit.addEventListener('click', (e) =>{
            output.innerHTML = `${input.value} &deg;C &rarr; ${temperatureUnits.celsius.cToF()} &deg;F <br>
		${input.value} &deg;K &rarr; ${temperatureUnits.kelvin.kToF()} &deg;F <br>
		`;
        });
        toKelvin.addEventListener('click', (e) =>{
            output.innerHTML = `${input.value} &deg;F &rarr; ${temperatureUnits.fahrenheit.fToK()} &deg;K <br>
		${input.value} &deg;C &rarr; ${temperatureUnits.celsius.cToK()} &deg;K <br>
		`;
        });
        output.style.display = 'block';
        output.innerHTML = "";
        input.value = null;

    });


    const cookingButton = document.getElementById('cooking').addEventListener('click', (e) => {
        input.style.display = 'block';
        toMetric.style.display = 'none';
        toImperial.style.display = 'none';
        toFahrenheit.style.display = 'none';
        toCelsius.style.display = 'none';
        toKelvin.style.display = 'none';
        hours.style.display = 'none';
        days.style.display = 'none';
        mileToKm.style.display = 'none';
        kmToMile.style.display = 'none';
        measurement.style.display = 'block';
        m2ml.style.display = 'block';
        resetButton.style.display = 'block';
        measurement.addEventListener('click', (e) =>{
            output.innerHTML = `${input.value} teaspoon &rarr; ${cookingUnits.measurement.tpTotbsp()} tablespoon <br>
		${input.value} tablespoon &rarr; ${cookingUnits.measurement.tbspToflon()} fl. ounce <br>
		${input.value} tablespoon &rarr; ${cookingUnits.measurement.tbspTocup()} cup <br>
		${input.value} fl. ounce &rarr; ${cookingUnits.measurement.flonTocup()} cup <br>
		${input.value} tablespoon &rarr; ${cookingUnits.measurement.tbspTotsp()} teaspoon <br>
		${input.value} fl. ounce &rarr; ${cookingUnits.measurement.flonTotbsp()} tablespoon <br>
		${input.value} cup &rarr; ${cookingUnits.measurement.cupTotbsp()} tablespoon <br>
		${input.value} cup &rarr; ${cookingUnits.measurement.cupToflon()} fl. ounce
		`;
        });
        m2ml.addEventListener('click', (e) =>{
            output.innerHTML = `${input.value} teaspoon &rarr; ${cookingUnits.m2ml.tspToml()} ml <br>
		${input.value} tablespoon &rarr; ${cookingUnits.m2ml.tbspToml()} ml <br>
		${input.value} cup &rarr; ${cookingUnits.m2ml.cupToml()} ml <br>
		`;
        });
        output.style.display = 'block';
        output.innerHTML = "";
        input.value = null;
    });


    resetButton.addEventListener('click', (e) =>{
        location.reload();
    });


    const lengthUnits = {
        imperial: {
            inch(){
                let inchToMm = (input.value * 25.4).toFixed(2);
                return inchToMm;
            },
            foot(){
                let footToCm = (input.value * 30.48).toFixed(2);
                return footToCm;
            },
            yard(){
                let yardToM = (input.value / 1.094).toFixed(2);
                return yardToM;
            },
            mile(){
                let mileToKm = (input.value * 1.609).toFixed(2);
                return mileToKm;
            }
        },
        metric: {
            mm(){
                let mmToInch  = (input.value / 25.4).toFixed(2);
                return mmToInch;
            },
            cm(){
                let cmToFoot = (input.value / 30.48).toFixed(2);
                return cmToFoot;
            },
            m(){
                let mToYard = (input.value * 1.094).toFixed(2);
                return mToYard;
            },
            km(){
                let kmToMile = (input.value / 1.609).toFixed(2);
                return kmToMile;
            }
        }
    };

    const massUnits = {
        imperial: {
            ounce(){
                let ounceToGram = (input.value * 28.35).toFixed(2);
                return ounceToGram;
            },
            pound(){
                let poundToKg = (input.value / 2.205).toFixed(2);
                return poundToKg;
            },
            stone(){
                let stoneToKg = (input.value * 6.35).toFixed(2);
                return stoneToKg;
            },
            imperialTon(){
                let tonToTonne = (input.value * 1.016).toFixed(2);
                return tonToTonne;
            },
            onTop(){
                let pd = (input.value / 16).toFixed(2);
                return pd;
            }
        },
        metric: {
            gram(){
                let gramToOunce = (input.value / 28.35).toFixed(2);
                return gramToOunce;
            },
            kglb(){
                let kgToPound = (input.value * 2.205).toFixed(2);
                return kgToPound;
            },
            kgst(){
                let kgToStone = (input.value / 6.35).toFixed(2);
                return kgToStone;
            },
            metricTonne(){
                let tonneToTon = (input.value / 1.016).toFixed(2);
                return tonneToTon;
            },
            pToon(){
                let on = (input.value * 16.0).toFixed(2);
                return on;
            }
        }
    };

    const volumeUnits = {
        imperial: {
            fluidOunce(){
                let flozToMl = (input.value * 28.413).toFixed(2);
                return flozToMl;
            },
            pint(){
                let pintToL = (input.value / 1.76).toFixed(2);
                return pintToL;
            },
            quart(){
                let quartToL = (input.value * 1.137).toFixed(2);
                return quartToL;
            },
            gallon(){
                let gallonToL = (input.value * 4.546).toFixed(2);
                return gallonToL;
            }
        },
        metric: {
            ml(){
                let mlToFloz = (input.value / 28.413).toFixed(2);
                return mlToFloz;
            },
            lToPt(){
                let lToPt = (input.value * 1.76).toFixed(2);
                return lToPt;
            },
            lToQt(){
                let lToQt = (input.value / 1.137).toFixed(2);
                return lToQt;
            },
            lToGallon(){
                let lToGallon = (input.value / 4.546).toFixed(2);
                return lToGallon;
            }

        }
    };

    const temperatureUnits = {
        fahrenheit: {
            fToC(){
                let c = ((input.value - 32)* 5/9).toFixed(2);
                return c;

            },
            fToK(){
                let k = ((input.value - 32) * 5/9 + 273.15).toFixed(2);
                return k;
            }
        },
        celsius: {
            cToF(){
                let f = ((input.value * 9/5) + 32).toFixed(2);
                return f;
            },
            cToK(){
                //let kconst = 273.15;
                let ck = (parseFloat(input.value) + 273.15).toFixed(2);
                return ck;

            }
        },
        kelvin: {
            kToF(){
                let kf = ((input.value - 273.15)* 9/5 + 32).toFixed(2);
                return kf;
            },
            kToC(){
                let kc = (input.value - 273.15).toFixed(2);
                return kc;
            }
        }

    };

    const speedUnits = {
        mphToKmph(){
            let kmph = (input.value * 1.609).toFixed(2);
            return kmph;
        },
        kmphToMph() {
            let mph = (input.value / 1.609).toFixed(2);
            return mph;
        }
    };

    const timeUnits = {
        hours: {
            minTohr(){
                let mhr = (input.value/60).toFixed(3);
                return mhr;
            },
            dayTohr(){
                let dhr = input.value*24;
                return dhr;
            }
        },
        days: {
            minToDay(){
                let mday = (input.value / 1440).toFixed(4);
                return mday;
            },
            hrToDay(){
                let hrday = (input.value / 24).toFixed(2);
                return hrday;
            }
        }
    };

    const cookingUnits = {
        measurement: {
            tpTotbsp(){
                let tbsp = (input.value/3).toFixed(2);
                return tbsp;
            },
            tbspToflon(){
                let flounce = (input.value/2).toFixed(2);
                return flounce;
            },
            tbspTocup(){
                let cup = (input.value/16).toFixed(2);
                return cup;
            },
            flonTocup(){
                let cup = (input.value/8).toFixed(2);
                return cup;
            },
            tbspTotsp(){
                let tsp = (input.value*3).toFixed(2);
                return tsp;
            },
            flonTotbsp(){
                let tbsp = (input.value*2).toFixed(2);
                return tbsp;
            },
            cupTotbsp(){
                let tbsp = (input.value*16).toFixed(2);
                return tbsp;
            },
            cupToflon(){
                let flon = (input.value*8).toFixed(2);
                return flon;
            },
        },
        m2ml: {
            tspToml(){
                let ml = (input.value*4.93).toFixed(2);
                return ml;
            },
            tbspToml(){
                let ml = (input.value*14.79).toFixed(2);
                return ml;
            },
            cupToml(){
                let ml = (input.value*236.588).toFixed(2);
                return ml;
            },
        }
    };




</script>
</body>
</html>
